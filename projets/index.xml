<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projets on Cours info TSI</title>
    <link>https://info-tsi-vieljeux.github.io/projets/</link>
    <description>Recent content in Projets on Cours info TSI</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Sat, 06 Mar 2021 14:23:56 +0100</lastBuildDate>
    <atom:link href="https://info-tsi-vieljeux.github.io/projets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Doomsday</title>
      <link>https://info-tsi-vieljeux.github.io/projets/doomsday/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/doomsday/</guid>
      <description>&lt;h1 id=&#34;algorithme-du-doomsday&#34;&gt;Algorithme du Doomsday&lt;/h1&gt;&#xA;&lt;p&gt;Permet de trouver de tête le jour de la semaine pour n&amp;rsquo;importe quelle date du calendrier grégorien (à partir de 1753).&lt;/p&gt;&#xA;&lt;p&gt;On donne une date sous la forme $jour/mois/annee$.&lt;/p&gt;&#xA;&lt;p&gt;On décompose tout d&amp;rsquo;abord  $annee$ en $s\times 100 + an$ où $s$ est le nombre de siècles ($an&amp;lt;100$).&lt;/p&gt;&#xA;&lt;h2 id=&#34;doomscentury-c&#34;&gt;doomscentury $c$&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;on calcule le reste de la division euclidienne par 4 du nombre de siècle $s$&lt;/li&gt;&#xA;&lt;li&gt;on multiplié par 2&lt;/li&gt;&#xA;&lt;li&gt;on prend le complément à 7&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;$$c = 7-(s\mod 4) \times2 $$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wordle</title>
      <link>https://info-tsi-vieljeux.github.io/projets/wordle/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/wordle/</guid>
      <description>&lt;h1 id=&#34;wordle&#34;&gt;Wordle&lt;/h1&gt;&#xA;&lt;p&gt;Écrire un solveur du jeu &lt;a href=&#34;https://www.nytimes.com/games/wordle/index.html&#34;&gt;Wordle&lt;/a&gt; qui propose un premier mot puis qui propose le mot suivant en fonction du motif coloré qu&amp;rsquo;on lui transmet en réponse au premier mot rentré, et ainsi de suite jusqu&amp;rsquo;à ce qu&amp;rsquo;il nous propose le mot du jour. Et le tout en moins de 6 essais.&lt;/p&gt;&#xA;&lt;p&gt;Pour récupérer dans le code la liste des 2315 mots pouvant être solution :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;url1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://gist.githubusercontent.com/cfreshman/a03ef2cba789d8cf00c08f767e0fad7b/raw/5d752e5f0702da315298a6bb5a771586d6ff445c/wordle-answers-alphabetical.txt&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;liste_solutions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url1,header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;liste_solutions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; liste_solutions[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tolist()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Et pour la liste des mots 10657 mots autorisés (ne comprenant pas les mots solutions) :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stéganographie</title>
      <link>https://info-tsi-vieljeux.github.io/projets/steganographie/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/steganographie/</guid>
      <description>&lt;h1 id=&#34;stéganographie&#34;&gt;Stéganographie&lt;/h1&gt;&#xA;&lt;h2 id=&#34;première-mission&#34;&gt;Première mission&lt;/h2&gt;&#xA;&lt;p&gt;Dévoiler le message caché dans les 2 bits de poids faible de l&amp;rsquo;image fournie (dont l&amp;rsquo;adresse est &lt;a href=&#34;https://info-tsi-vieljeux.github.io/imageprojet.png&#34;&gt;https://info-tsi-vieljeux.github.io/cryptedimage.png&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://info-tsi-vieljeux.github.io/cryptedimage.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Importons d&amp;rsquo;abord les modules nécessaires :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urllib.request &lt;span style=&#34;color:#75715e&#34;&gt;# pour récupérer une image sur le web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; IPython.display &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; display &lt;span style=&#34;color:#75715e&#34;&gt;# pour afficher dans un notebook&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ce petit code suffit pour dévoiler l&amp;rsquo;image cachée dans l&amp;rsquo;image :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decache_image&lt;/span&gt;(image):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image_decrypt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (image &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; image_decrypt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;image % 2**2&lt;/code&gt; récupère les deux bits de poids faibles.&lt;br&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;* 2**6&lt;/code&gt; permet de &amp;ldquo;dilater&amp;rdquo; les 4 valeurs $\{0,1,2,3\}\rightarrow\{0,64,128,192\}$&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;+ 2**5&lt;/code&gt; permet de décaller les valeurs pour les centrer entre 0 et 255 $\rightarrow\{32,96,160,224\}$.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Pour l&amp;rsquo;afficher (sur un notebook type Colab) :&lt;/p&gt;</description>
    </item>
    <item>
      <title>IEEE-754</title>
      <link>https://info-tsi-vieljeux.github.io/projets/ieee754/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/ieee754/</guid>
      <description>&lt;h1 id=&#34;ieee-754&#34;&gt;IEEE-754&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Réaliser un convertisseur permettant de donner l&amp;rsquo;écriture d&amp;rsquo;un flottant sous la forme d&amp;rsquo;un mot binaire de 64 bits suivant la norme IEEE-754 (cf. &lt;a href=&#34;https://info-tsi-vieljeux.github.io/semestre_2/nombre/#norme-ieee-754&#34;&gt;cours sur le codage des nombres&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Réaliser aussi le convertisseur inverse, du mot 64 bits au nombre décimal.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;pour-vérifier&#34;&gt;Pour vérifier&lt;/h2&gt;&#xA;&lt;p&gt;Nombre à convertir en mot machine 64 bits : &lt;input type=&#34;text&#34; id=&#34;nombre&#34; value=&#34;0&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;button onclick=&#34;convNb()&#34;&gt;Conversion&lt;/button&gt;&lt;/p&gt;&#xA;&lt;p id=&#34;res1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Mot machine 64 bits à convertir en nombre décimal : &lt;input type=&#34;text&#34; id=&#34;mot&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;button onclick=&#34;convMot()&#34;&gt;Conversion&lt;/button&gt;&lt;/p&gt;&#xA;&lt;p id=&#34;res2&#34;&gt;&lt;/p&gt;&#xA;&lt;script&gt;&#xA;function conv_fract(n) {&#xA;&#x9;n = Math.abs(n);&#xA;  n = n - Math.trunc(n);&#xA;  n *= 2;&#xA;  let count = 0;&#xA;  let s = &#39;&#39;;&#xA;  let eps = 10**(-9);&#xA;  while (count &lt; 64) {&#xA;  &#x9;if (n&gt;=1) {&#xA;      &#x9;s += &#39;1&#39;;&#xA;        if (!((1-eps &lt; n) &amp;&amp; (n &lt; 1+eps))) {&#xA;      &#x9;  n = (n-1)*2;&#xA;        }&#xA;        else {&#xA;      &#x9;  break;&#xA;        }&#xA;  &#x9;}&#xA;    else {&#xA;      s += &#39;0&#39;;&#xA;    &#x9;n *= 2&#xA;    }&#xA;    count += 1&#xA;  }&#xA;  console.log(&#34;yop&#34;,s)&#xA;  return s&#xA;}&#xA;&#xA;function convNb() {&#xA;  var mantisse_str;&#xA;  var exp;&#xA;  var exp_str;&#xA;  const element = document.getElementById(&#34;res1&#34;);&#xA;  var n = document.getElementById(&#34;nombre&#34;).value;&#xA;  n = n.replace(&#34;,&#34;, &#34;.&#34;);&#xA;  n = parseFloat(n);&#xA;  s = &#39;&#39;;&#xA;  if (n &lt; 0) {&#xA;  &#x9;s += &#39;1&#39;;&#xA;    n = Math.abs(n);&#xA;    }&#x9;&#xA;  else {&#xA;    s += &#39;0&#39;;&#xA;    }&#xA;  element.innerHTML = &#34;bit de signe : &lt;span style=&#39;color:green;&#39;&gt;&#34; + s + &#34;&lt;/span&gt;&lt;br&gt;&#34;;&#xA;  n = Math.abs(n);&#xA;  if (n &gt; 1) {&#xA;  &#x9;let mantPartieEntiere = Math.trunc(n).toString(2);&#xA;    mantisse_str = mantPartieEntiere.slice(1,);&#xA;    mantisse_str += conv_fract(n).slice(0,52-mantisse_str.length);&#xA;    exp = mantPartieEntiere.length-1 + 1023;&#xA;    exp_str = exp.toString(2);&#xA;    s += exp_str.padStart(11, &#39;0&#39;);&#xA;    }&#xA;  else {&#xA;    if (n == 0) {&#xA;      exp = 0;&#xA;      exp_str = &#39;0&#39;*11;&#xA;      s += exp_str;&#xA;      mantisse_str = &#39;0&#39;*52;&#xA;    }&#xA;&#x9;&#x9;else {&#xA;      let dvlpt = &#34;0&#34;+conv_fract(n);&#xA;      let Exp = 0;&#xA;      while (dvlpt[Exp] == &#34;0&#34; ){&#xA;        Exp += 1;&#xA;      }&#xA;      exp = Exp*(-1) + 1023&#xA;      exp_str = exp.toString(2);&#xA;      s += exp_str.padStart(11, &#39;0&#39;);&#xA;      mantisse_str = conv_fract(n).slice(Exp,);&#xA;    }&#xA;    }&#xA;  element.innerHTML += &#34;exposant (en puissance de 2) : &#34;;&#xA;  element.innerHTML += exp-1023;&#xA;  element.innerHTML += &#34; + 1023 = &#34;;&#xA;  element.innerHTML += exp;&#xA;  element.innerHTML += &#34;  d&#39;où en binaire : &lt;span style=&#39;color:purple;&#39;&gt;&#34;+exp_str+&#34;&lt;/span&gt;&#34;;&#xA;  s += mantisse_str;&#xA;  s = s.padEnd(64, &#39;0&#39;);&#xA;  s = s.slice(0,64);&#xA;  if (s[0]==1) {n=-n}&#xA;  element.innerHTML += &#34;&lt;br&gt;mot machine correspondant à &#34;+String(n)+&#34; : &lt;br&gt;&#34;&#xA;  element.innerHTML += &#34;&lt;span style=&#39;color:green;&#39;&gt;&#34; + s[0] + &#34; &lt;/span&gt;&#34;;&#xA;  element.innerHTML += &#34;&lt;span style=&#39;color:purple;&#39;&gt;&#34; + s.slice(1,12) + &#34; &lt;/span&gt;&#34;;&#xA;  element.innerHTML += &#34;&lt;span style=&#39;color:blue;&#39;&gt;&#34; + s.slice(12,) + &#34;&lt;/span&gt;&#34;;&#xA;}&#xA;&#xA;function convMot() {&#xA;&#x9;var nombre;&#xA;  const element = document.getElementById(&#34;res2&#34;);&#xA;  var s = document.getElementById(&#34;mot&#34;).value;&#xA;  s = s.replace(/\s/g, &#39;&#39;);&#xA;&#x9;if (parseInt(s) == 0) {&#xA;  &#x9;nombre = 0&#xA;  }&#xA;  else {&#xA;    let exp = parseInt(s.slice(1,12),2) - 1023&#xA;    nombre =  2**exp&#xA;    let mantisse = s.slice(12,)&#xA;    for (let i = 0; i &lt; 52; i++) {&#xA;      exp += -1&#xA;      nombre += parseInt(mantisse[i])*2**exp&#xA;    }&#xA;    if (s[0]==1){&#xA;      nombre *= -1&#xA;    }&#xA;  }&#xA; element.innerHTML = nombre&#xA;}&#xA;&lt;/script&gt;&#xA;&lt;br&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;une-solution-possible&#34;&gt;Une solution possible&lt;/h2&gt;&#xA;&lt;p&gt;La fonction suivante convertit la partie fractionnaire du nombre &lt;code&gt;n&lt;/code&gt; en binaire et donne ainsi son développement binaire (équivalent d&amp;rsquo;un dévelopement décimal).&lt;br&gt;&#xA;Tous les nombres auront nécessairement un développement binaire fini (et seront donc des fractions dyadiques) puisque le flottant donné en argument a lui même une écriture fini (il est codé sur 64 bits !).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nombre de Bacon</title>
      <link>https://info-tsi-vieljeux.github.io/projets/bacon/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/bacon/</guid>
      <description>&lt;h1 id=&#34;nombre-de-bacon&#34;&gt;Nombre de Bacon&lt;/h1&gt;&#xA;&lt;p&gt;On part d&amp;rsquo;un ensemble de 250 films populaires. Pour chaque film, on a la liste des acteurs qui y jouent.&lt;/p&gt;&#xA;&lt;p&gt;À partir de ces informations, on peut créer un &lt;strong&gt;graphe&lt;/strong&gt; où les sommets sont les films et les acteurs et où une arête lie un acteur à un film dans lequel il joue.&lt;/p&gt;&#xA;&lt;p&gt;Le graphe obtenu est &lt;strong&gt;biparti&lt;/strong&gt; car il n&amp;rsquo;y a pas d&amp;rsquo;arête entre les acteurs, ni entre les films, seulement entre sommets de catégories différentes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nim</title>
      <link>https://info-tsi-vieljeux.github.io/projets/nim/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/nim/</guid>
      <description>&lt;h1 id=&#34;jeu-de-nim&#34;&gt;Jeu de Nim&lt;/h1&gt;&#xA;&lt;p&gt;Présentation du jeu et de l&amp;rsquo;algorithme de Bouton :&lt;/p&gt;&#xA;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/2jahbr5wMHk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h3 id=&#34;mission-&#34;&gt;Mission :&lt;/h3&gt;&#xA;&lt;p&gt;Coder une IA qui joue un coup gagnant lorsqu&amp;rsquo;elle est est en position gagnante (en suivant l&amp;rsquo;algorithme de Bouton) et qui joue aléatoirement si elle est sur une position perdante.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://presentationssite.github.io/info/nim/#/&#34;&gt;&lt;strong&gt;Jouer contre une telle IA&lt;/strong&gt;.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle</title>
      <link>https://info-tsi-vieljeux.github.io/projets/oracle/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/oracle/</guid>
      <description>&lt;h1 id=&#34;loracle-daaronson&#34;&gt;L&amp;rsquo;oracle d&amp;rsquo;Aaronson&lt;/h1&gt;&#xA;&lt;p&gt;Un petit projet tout gentil pour la fin&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;L&amp;rsquo;oracle d&amp;rsquo;Aaronson est un petit programme capable de prédire si une personne va taper &amp;ldquo;g&amp;rdquo; ou &amp;ldquo;h&amp;rdquo; sur son clavier avec une précision généralement supérieure à 60%.&lt;/p&gt;&#xA;&lt;p&gt;L&amp;rsquo;idée du programme de base :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pour chaque mot possible de 5 lettres (&amp;ldquo;g&amp;rdquo; ou &amp;ldquo;h&amp;rdquo;) entré par l&amp;rsquo;utilisateur, on tient à jour dans un registre la lettre que l&amp;rsquo;utilisateur tape tout de suite après.&lt;/li&gt;&#xA;&lt;li&gt;Il suffit ensuite de générer une prédiction pour les 5 dernières lettres qui ont été entrées en regardant quelle lettre est majoritairement donnée après ce mot.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Écrire le programme.&lt;/li&gt;&#xA;&lt;li&gt;Comment pourrait-on l&amp;rsquo;améliorer ?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;br&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;loracle-en-action&#34;&gt;L&amp;rsquo;oracle en action&lt;/h2&gt;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xA;&lt;a href=&#34;https://presentationssite.github.io/info/oracle/&#34;&gt;&#xA;    &lt;img src=&#34;https://info-tsi-vieljeux.github.io/boulecristal.png&#34; alt=&#34;description&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;p style=&#34;text-align:center;&#34;&gt;Cliquer sur l&#39;image&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tournoi d&#39;Axelrod</title>
      <link>https://info-tsi-vieljeux.github.io/projets/axelrod/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/axelrod/</guid>
      <description>&lt;h1 id=&#34;le-tournoi-daxelrod&#34;&gt;Le tournoi d&amp;rsquo;Axelrod&lt;/h1&gt;&#xA;&lt;p&gt;La mission est d&amp;rsquo;implémenter le tournoi d&amp;rsquo;Axelrod première version présenté dans la vidéo ci-dessous.&lt;/p&gt;&#xA;&lt;p&gt;Vous ferez concourir les stratégies suivantes en écrivant une fonction par stratégie :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;AllC&lt;/code&gt; : coopère toujours.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AllD&lt;/code&gt; : trahit toujours.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Rando&lt;/code&gt; : joue au hasard.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Alt&lt;/code&gt; : alterne un coup sur deux.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;TitforTat&lt;/code&gt; : coopère au premier coup puis joue le coup précédent de l&amp;rsquo;adversaire.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Grudger&lt;/code&gt; : commence par coopérer mais dès que l&amp;rsquo;autre trahit, trahit toujours.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Joss&lt;/code&gt; : commence par coopérer puis joue le coup précédent de l&amp;rsquo;adversaire sauf 10% du temps où il trahit.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;TitforTwoTats&lt;/code&gt; : trahit si l&amp;rsquo;autre trahit deux fois de suite, coopère sinon.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;TwoTitsforTat&lt;/code&gt; : coopère tant que l&amp;rsquo;autre coopère, mais à chaque trahison de l&amp;rsquo;adversaire, trahit deux fois consécutives.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Tester&lt;/code&gt; : commence par trahir. Si l&amp;rsquo;autre a coopéré au premier coup, &lt;code&gt;Tester&lt;/code&gt; se repent et joue &lt;code&gt;TitforTat&lt;/code&gt; pour la suite, sinon il joue &lt;code&gt;Alt&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Eatherly&lt;/code&gt; : commence par trahir puis trahit en proportion du taux de trahison de l&amp;rsquo;autre jusqu&amp;rsquo;à ce coup.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Gofman&lt;/code&gt; : commence par coopérer. Si les deux joueurs ont joué différemment au coup précédent, trahit avec une probabilité de 5/7, et coopère s&amp;rsquo;ils ont joué la même chose.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Tullock&lt;/code&gt; : coopère les 10 premiers coups puis coopère à chaque coup 10% de moins que l&amp;rsquo;autre a coopéré sur les 10 coups qui précèdent.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Pavlov&lt;/code&gt; : commence par coopérer. Si l&amp;rsquo;autre a coopéré au dernier tour, on garde le même coup, sinon on change.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Donnez le palmarès du tournoi après 200 parties.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

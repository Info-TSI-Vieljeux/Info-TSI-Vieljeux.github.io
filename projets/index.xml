<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projets on Cours info TSI</title>
    <link>https://info-tsi-vieljeux.github.io/projets/</link>
    <description>Recent content in Projets on Cours info TSI</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Sat, 06 Mar 2021 14:23:56 +0100</lastBuildDate>
    <atom:link href="https://info-tsi-vieljeux.github.io/projets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Doomsday</title>
      <link>https://info-tsi-vieljeux.github.io/projets/doomsday/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/doomsday/</guid>
      <description>Algorithme du Doomsday Permet de trouver de tête le jour de la semaine pour n&amp;rsquo;importe quelle date du calendrier grégorien (à partir de 1753).&#xA;On donne une date sous la forme $jour/mois/annee$.&#xA;On décompose tout d&amp;rsquo;abord $annee$ en $s\times 100 + an$ où $s$ est le nombre de siècles ($an&amp;lt;100$).&#xA;doomscentury $c$ on calcule le reste de la division euclidienne par 4 du nombre de siècle $s$ on multiplié par 2 on prend le complément à 7 $$c = 7-(s\mod 4) \times2 $$</description>
    </item>
    <item>
      <title>Wordle</title>
      <link>https://info-tsi-vieljeux.github.io/projets/wordle/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/wordle/</guid>
      <description>Wordle Écrire un solveur du jeu Wordle qui propose un premier mot puis qui propose le mot suivant en fonction du motif coloré qu&amp;rsquo;on lui transmet en réponse au premier mot rentré, et ainsi de suite jusqu&amp;rsquo;à ce qu&amp;rsquo;il nous propose le mot du jour. Et le tout en moins de 6 essais.&#xA;Pour récupérer dans le code la liste des 2315 mots pouvant être solution :&#xA;import pandas as pd url1 = &amp;#39;https://gist.</description>
    </item>
    <item>
      <title>Stéganographie</title>
      <link>https://info-tsi-vieljeux.github.io/projets/steganographie/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/steganographie/</guid>
      <description>Stéganographie Première mission Dévoiler le message caché dans les 2 bits de poids faible de l&amp;rsquo;image fournie (dont l&amp;rsquo;adresse est https://info-tsi-vieljeux.github.io/cryptedimage.png).&#xA;Importons d&amp;rsquo;abord les modules nécessaires :&#xA;from PIL import Image import urllib.request # pour récupérer une image sur le web from IPython.display import display # pour afficher dans un notebook import numpy as np Ce petit code suffit pour dévoiler l&amp;rsquo;image cachée dans l&amp;rsquo;image :&#xA;def decache_image(image): image_decrypt = (image % 2**2) * 2**6 + 2**5 return image_decrypt image % 2**2 récupère les deux bits de poids faibles.</description>
    </item>
    <item>
      <title>IEEE-754</title>
      <link>https://info-tsi-vieljeux.github.io/projets/ieee754/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/ieee754/</guid>
      <description>IEEE-754 Réaliser un convertisseur permettant de donner l&amp;rsquo;écriture d&amp;rsquo;un flottant sous la forme d&amp;rsquo;un mot binaire de 64 bits suivant la norme IEEE-754 (cf. cours sur le codage des nombres). Réaliser aussi le convertisseur inverse, du mot 64 bits au nombre décimal. Pour vérifier Nombre à convertir en mot machine 64 bits : Conversion&#xA;Mot machine 64 bits à convertir en nombre décimal : Conversion&#xA;Une solution possible La fonction suivante convertit la partie fractionnaire du nombre n en binaire et donne ainsi son développement binaire (équivalent d&amp;rsquo;un dévelopement décimal).</description>
    </item>
    <item>
      <title>Nombre de Bacon</title>
      <link>https://info-tsi-vieljeux.github.io/projets/bacon/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/bacon/</guid>
      <description>Nombre de Bacon On part d&amp;rsquo;un ensemble de 250 films populaires. Pour chaque film, on a la liste des acteurs qui y jouent.&#xA;À partir de ces informations, on peut créer un graphe où les sommets sont les films et les acteurs et où une arête lie un acteur à un film dans lequel il joue.&#xA;Le graphe obtenu est biparti car il n&amp;rsquo;y a pas d&amp;rsquo;arête entre les acteurs, ni entre les films, seulement entre sommets de catégories différentes.</description>
    </item>
    <item>
      <title>Nim</title>
      <link>https://info-tsi-vieljeux.github.io/projets/nim/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/nim/</guid>
      <description>Jeu de Nim Présentation du jeu et de l&amp;rsquo;algorithme de Bouton :&#xA;Mission : Coder une IA qui joue un coup gagnant lorsqu&amp;rsquo;elle est est en position gagnante (en suivant l&amp;rsquo;algorithme de Bouton) et qui joue aléatoirement si elle est sur une position perdante.&#xA;Jouer contre une telle IA.&#xA;Un code solution possible : # exemple de plateau : [1,3,5,7] from random import randint def tourIA(plateau): nimSomme = 0 for nb in plateau: nimSomme ^= nb if nimSomme == 0: # position perdante ligne = randint(0,len(plateau)-1) while plateau[ligne] == 0: ligne = randint(0,len(plateau)-1) nbjetons = randint(1,plateau[ligne]) plateau[ligne] -= nbjetons print(f&amp;#34;l&amp;#39;IA en prend {nbjetons} sur la ligne {ligne+1}&amp;#34;) print(plateau) else: compteur = 0 for i in range(len(plateau)): if plateau[i] !</description>
    </item>
    <item>
      <title>Oracle</title>
      <link>https://info-tsi-vieljeux.github.io/projets/oracle/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/oracle/</guid>
      <description>L&amp;rsquo;oracle d&amp;rsquo;Aaronson Un petit projet tout gentil pour la fin&amp;hellip;&#xA;L&amp;rsquo;oracle d&amp;rsquo;Aaronson est un petit programme capable de prédire si une personne va taper &amp;ldquo;g&amp;rdquo; ou &amp;ldquo;h&amp;rdquo; sur son clavier avec une précision généralement supérieure à 60%.&#xA;L&amp;rsquo;idée du programme de base :&#xA;Pour chaque mot possible de 5 lettres (&amp;ldquo;g&amp;rdquo; ou &amp;ldquo;h&amp;rdquo;) entré par l&amp;rsquo;utilisateur, on tient à jour dans un registre la lettre que l&amp;rsquo;utilisateur tape tout de suite après.</description>
    </item>
    <item>
      <title>Tournoi d&#39;Axelrod</title>
      <link>https://info-tsi-vieljeux.github.io/projets/axelrod/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/axelrod/</guid>
      <description>Le tournoi d&amp;rsquo;Axelrod La mission est d&amp;rsquo;implémenter le tournoi d&amp;rsquo;Axelrod première version présenté dans la vidéo ci-dessous.&#xA;Vous ferez concourir les stratégies suivantes en écrivant une fonction par stratégie :&#xA;AllC : coopère toujours. AllD : trahit toujours. Rando : joue au hasard. Alt : alterne un coup sur deux. TitforTat : coopère au premier coup puis joue le coup précédent de l&amp;rsquo;adversaire. Grudger : commence par coopérer mais dès que l&amp;rsquo;autre trahit, trahit toujours.</description>
    </item>
  </channel>
</rss>

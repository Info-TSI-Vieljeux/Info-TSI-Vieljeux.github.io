<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Cours info TSI</title>
    <link>https://info-tsi-vieljeux.github.io/</link>
    <description>Recent content in Introduction on Cours info TSI</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Sat, 06 Mar 2021 14:23:56 +0100</lastBuildDate>
    <atom:link href="https://info-tsi-vieljeux.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Doomsday</title>
      <link>https://info-tsi-vieljeux.github.io/projets/doomsday/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/doomsday/</guid>
      <description>&lt;h1 id=&#34;algorithme-du-doomsday&#34;&gt;Algorithme du Doomsday&lt;/h1&gt;&#xA;&lt;p&gt;Permet de trouver de tête le jour de la semaine pour n&amp;rsquo;importe quelle date du calendrier grégorien (à partir de 1753).&lt;/p&gt;&#xA;&lt;p&gt;On donne une date sous la forme $jour/mois/annee$.&lt;/p&gt;&#xA;&lt;p&gt;On décompose tout d&amp;rsquo;abord  $annee$ en $s\times 100 + an$ où $s$ est le nombre de siècles ($an&amp;lt;100$).&lt;/p&gt;&#xA;&lt;h2 id=&#34;doomscentury-c&#34;&gt;doomscentury $c$&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;on calcule le reste de la division euclidienne par 4 du nombre de siècle $s$&lt;/li&gt;&#xA;&lt;li&gt;on multiplié par 2&lt;/li&gt;&#xA;&lt;li&gt;on prend le complément à 7&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;$$c = 7-(s\mod 4) \times2 $$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Les bonnes pratiques</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/bonnes_pratiques/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/bonnes_pratiques/</guid>
      <description>&lt;h1 id=&#34;les-bonnes-pratiques&#34;&gt;Les bonnes pratiques&lt;/h1&gt;&#xA;&lt;p&gt;Beaucoup de personnes amenées à coder plus ou moins régulièrement se sont un jour retrouvées à maudire leur moi du passé en reprenant un programme qu&amp;rsquo;ils avaient écrit seulement quelques semaines/mois auparavant mais qui leur est subitement devenu  complètement cryptique.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://c.tenor.com/A7NIlRIBtNoAAAAM/brooklyn99-brooklyn-nine-nine.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Le temps perdu est alors énorme et vécu d&amp;rsquo;autant plus douloureusement qu&amp;rsquo;il était facilement évitable&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://c.tenor.com/UsEL0CtIGKwAAAAC/trash-computer.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;commenter-son-code&#34;&gt;Commenter son code&lt;/h2&gt;&#xA;&#xA;&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;&lt;strong&gt;Commenter son code&lt;/strong&gt; via l&amp;rsquo;utilisation de &lt;code&gt;#&lt;/code&gt; est la principale protection contre de telles autotortures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 0 : Démarrage</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp0/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp0/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 1 : recherche simple</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp1recherche/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp1recherche/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Traits généraux</title>
      <link>https://info-tsi-vieljeux.github.io/python/traitsgaux/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/python/traitsgaux/</guid>
      <description>&lt;h1 id=&#34;traits-généraux&#34;&gt;Traits généraux&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;h3 id=&#34;shell-et-ide&#34;&gt;Shell et IDE&lt;/h3&gt;&#xA;&lt;p&gt;Python est un langage de programmation interprété développé par Guido van Rossum en 1989. Langage impératif de haut-niveau doté d&amp;rsquo;une syntaxe simple, Python s&amp;rsquo;adapte à de nombreux contextes grâce à sa modularité ; une importante librairie de modules et packages permet en effet d&amp;rsquo;étendre ses capacités.&lt;/p&gt;&#xA;&lt;p&gt;Python possède son propre shell (interface en ligne de commande) : l&amp;rsquo;utilisateur entre une commande Python qui est interprétée immédiatement lorsque &lt;code&gt;Entrée&lt;/code&gt; est tapée.&lt;br&gt;&#xA;Au lancement, le shell Python, poli, se présente :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Correction / Terminaison</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/correctionterminaison/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/correctionterminaison/</guid>
      <description>&lt;h1 id=&#34;prouver-un-algorithme&#34;&gt;Prouver un algorithme&lt;/h1&gt;&#xA;&lt;p&gt;Le mot algorithme vient de la latinisation du nom du savant arabe al-Khuwārizmī (780-850) qui a entre autres permis l&amp;rsquo;introduction de l&amp;rsquo;algèbre en Europe (et il est aussi à l&amp;rsquo;origine de ce mot).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://info-tsi-vieljeux.github.io/1983.png?width=300&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Un algorithme est une méthode qui sert à résoudre un problème en un nombre fini d’étapes : chercher un mot dans le dictionnaire, classer des mots par ordre alphabétique, classer des nombres par ordre de grandeur, chercher le meilleur parcours possible sur une carte, trouver une racine carrée, construire des listes de nombres premiers, etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 2 : boucles imbriquées</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp2imbrication/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp2imbrication/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Types de base</title>
      <link>https://info-tsi-vieljeux.github.io/python/typesbase/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/python/typesbase/</guid>
      <description>&lt;h1 id=&#34;types-de-base&#34;&gt;Types de base&lt;/h1&gt;&#xA;&lt;p&gt;Les types de base en python (les catégories fondamentales des objets manipulés) sont :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Les &lt;strong&gt;entiers&lt;/strong&gt; &lt;code&gt;int&lt;/code&gt; (en anglais, &lt;em&gt;entier&lt;/em&gt; se dit &lt;em&gt;integer&lt;/em&gt;).&lt;br&gt;&#xA;Exemples : 1, 2, 1012, -18 etc.&#xA;&#xA;&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;Leur précision est infinie et leur taille est illimitée en Python.&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Les &lt;strong&gt;flottants&lt;/strong&gt; &lt;code&gt;float&lt;/code&gt;. Ce sont des approximations de nombres réels. La méthode d&amp;rsquo;écriture en machine de ces nombres, équivalente à une écriture scientifique pour nombre binaire, explique leur nom : ce sont des nombres à virgule flottante.&lt;br&gt;&#xA;Exemples : 3.58, -0.0398, 2e-7, 3e4 (les puissances de dix, notés &lt;code&gt;e&lt;/code&gt; ou &lt;code&gt;E&lt;/code&gt; renvoient toujours des nombres flottants).&#xA;&#xA;&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;&lt;strong&gt;Leur précision est limitée&lt;/strong&gt; à 53 bits, soit &lt;strong&gt;environ 16 chiffres significatifs en décimal&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wordle</title>
      <link>https://info-tsi-vieljeux.github.io/projets/wordle/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/wordle/</guid>
      <description>&lt;h1 id=&#34;wordle&#34;&gt;Wordle&lt;/h1&gt;&#xA;&lt;p&gt;Écrire un solveur du jeu &lt;a href=&#34;https://www.nytimes.com/games/wordle/index.html&#34;&gt;Wordle&lt;/a&gt; qui propose un premier mot puis qui propose le mot suivant en fonction du motif coloré qu&amp;rsquo;on lui transmet en réponse au premier mot rentré, et ainsi de suite jusqu&amp;rsquo;à ce qu&amp;rsquo;il nous propose le mot du jour. Et le tout en moins de 6 essais.&lt;/p&gt;&#xA;&lt;p&gt;Pour récupérer dans le code la liste des 2315 mots pouvant être solution :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;url1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://gist.githubusercontent.com/cfreshman/a03ef2cba789d8cf00c08f767e0fad7b/raw/5d752e5f0702da315298a6bb5a771586d6ff445c/wordle-answers-alphabetical.txt&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;liste_solutions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url1,header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;liste_solutions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; liste_solutions[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tolist()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Et pour la liste des mots 10657 mots autorisés (ne comprenant pas les mots solutions) :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Complexité</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/complexite/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/complexite/</guid>
      <description>&lt;h1 id=&#34;complexité-dun-algorithme&#34;&gt;Complexité d&amp;rsquo;un algorithme&lt;/h1&gt;&#xA;&lt;p&gt;Parmi les 3 questions qu&amp;rsquo;on peut se poser naturellement devant un algorithme (termine-t-il ? est-il correct ? combien de temps met-il ?), on a laissé la dernière en plan dans le chapitre précédent.&lt;/p&gt;&#xA;&lt;p&gt;La question du temps mis par l&amp;rsquo;algorithme est le problème de la &lt;strong&gt;complexité&lt;/strong&gt; de l&amp;rsquo;algorithme.&lt;/p&gt;&#xA;&lt;p&gt;L&amp;rsquo;objectif premier d&amp;rsquo;un calcul de complexité algorithmique est de pouvoir comparer l’efficacité d’algorithmes résolvant le même problème. Dans une situation donnée, cela permet donc d&amp;rsquo;établir lequel des algorithmes disponibles est le meilleur (du point de vue temps d&amp;rsquo;exécution).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stéganographie</title>
      <link>https://info-tsi-vieljeux.github.io/projets/steganographie/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/steganographie/</guid>
      <description>&lt;h1 id=&#34;stéganographie&#34;&gt;Stéganographie&lt;/h1&gt;&#xA;&lt;h2 id=&#34;première-mission&#34;&gt;Première mission&lt;/h2&gt;&#xA;&lt;p&gt;Dévoiler le message caché dans les 2 bits de poids faible de l&amp;rsquo;image fournie (dont l&amp;rsquo;adresse est &lt;a href=&#34;https://info-tsi-vieljeux.github.io/imageprojet.png&#34;&gt;https://info-tsi-vieljeux.github.io/cryptedimage.png&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://info-tsi-vieljeux.github.io/cryptedimage.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Importons d&amp;rsquo;abord les modules nécessaires :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urllib.request &lt;span style=&#34;color:#75715e&#34;&gt;# pour récupérer une image sur le web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; IPython.display &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; display &lt;span style=&#34;color:#75715e&#34;&gt;# pour afficher dans un notebook&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ce petit code suffit pour dévoiler l&amp;rsquo;image cachée dans l&amp;rsquo;image :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decache_image&lt;/span&gt;(image):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image_decrypt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (image &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; image_decrypt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;image % 2**2&lt;/code&gt; récupère les deux bits de poids faibles.&lt;br&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;* 2**6&lt;/code&gt; permet de &amp;ldquo;dilater&amp;rdquo; les 4 valeurs $\{0,1,2,3\}\rightarrow\{0,64,128,192\}$&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;+ 2**5&lt;/code&gt; permet de décaller les valeurs pour les centrer entre 0 et 255 $\rightarrow\{32,96,160,224\}$.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Pour l&amp;rsquo;afficher (sur un notebook type Colab) :&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 3 : utilisation de modules</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp3data/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp3data/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;#debord&#xA;{&#xA;overflow-x: auto; &#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Types structurés</title>
      <link>https://info-tsi-vieljeux.github.io/python/typesstruct/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/python/typesstruct/</guid>
      <description>&lt;h1 id=&#34;types-structurés&#34;&gt;Types structurés&lt;/h1&gt;&#xA;&lt;p&gt;Les types structurés (chaînes, tuiles, listes, dictionnaires, ensembles) sont des objets composés ; ils contiennent eux-mêmes d&amp;rsquo;autres objets.&lt;/p&gt;&#xA;&lt;p&gt;Certains de ces objets composites sont en plus indicés. Comme leur nom l&amp;rsquo;indique, on peut parcourir les éléments présents d&amp;rsquo;une &lt;strong&gt;structure indicée&lt;/strong&gt; à l&amp;rsquo;aide d&amp;rsquo;un indice (un nombre entier étiquetant l&amp;rsquo;indice). Les structures indicés sont donc ordonnées, ce sont des &lt;strong&gt;séquences&lt;/strong&gt;.&#xA;&#xA;&lt;div class=&#34;notices warning&#34; &gt;&lt;p&gt;&lt;strong&gt;L&amp;rsquo;indice commence toujours à 0&lt;/strong&gt;.&lt;br&gt;&#xA;Et donc si la structure contient n éléments, le dernier indice est n-1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>IEEE-754</title>
      <link>https://info-tsi-vieljeux.github.io/projets/ieee754/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/ieee754/</guid>
      <description>&lt;h1 id=&#34;ieee-754&#34;&gt;IEEE-754&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Réaliser un convertisseur permettant de donner l&amp;rsquo;écriture d&amp;rsquo;un flottant sous la forme d&amp;rsquo;un mot binaire de 64 bits suivant la norme IEEE-754 (cf. &lt;a href=&#34;https://info-tsi-vieljeux.github.io/semestre_2/nombre/#norme-ieee-754&#34;&gt;cours sur le codage des nombres&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Réaliser aussi le convertisseur inverse, du mot 64 bits au nombre décimal.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;pour-vérifier&#34;&gt;Pour vérifier&lt;/h2&gt;&#xA;&lt;p&gt;Nombre à convertir en mot machine 64 bits : &lt;input type=&#34;text&#34; id=&#34;nombre&#34; value=&#34;0&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;button onclick=&#34;convNb()&#34;&gt;Conversion&lt;/button&gt;&lt;/p&gt;&#xA;&lt;p id=&#34;res1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Mot machine 64 bits à convertir en nombre décimal : &lt;input type=&#34;text&#34; id=&#34;mot&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;button onclick=&#34;convMot()&#34;&gt;Conversion&lt;/button&gt;&lt;/p&gt;&#xA;&lt;p id=&#34;res2&#34;&gt;&lt;/p&gt;&#xA;&lt;script&gt;&#xA;function conv_fract(n) {&#xA;&#x9;n = Math.abs(n);&#xA;  n = n - Math.trunc(n);&#xA;  n *= 2;&#xA;  let count = 0;&#xA;  let s = &#39;&#39;;&#xA;  let eps = 10**(-9);&#xA;  while (count &lt; 64) {&#xA;  &#x9;if (n&gt;=1) {&#xA;      &#x9;s += &#39;1&#39;;&#xA;        if (!((1-eps &lt; n) &amp;&amp; (n &lt; 1+eps))) {&#xA;      &#x9;  n = (n-1)*2;&#xA;        }&#xA;        else {&#xA;      &#x9;  break;&#xA;        }&#xA;  &#x9;}&#xA;    else {&#xA;      s += &#39;0&#39;;&#xA;    &#x9;n *= 2&#xA;    }&#xA;    count += 1&#xA;  }&#xA;  console.log(&#34;yop&#34;,s)&#xA;  return s&#xA;}&#xA;&#xA;function convNb() {&#xA;  var mantisse_str;&#xA;  var exp;&#xA;  var exp_str;&#xA;  const element = document.getElementById(&#34;res1&#34;);&#xA;  var n = document.getElementById(&#34;nombre&#34;).value;&#xA;  n = n.replace(&#34;,&#34;, &#34;.&#34;);&#xA;  n = parseFloat(n);&#xA;  s = &#39;&#39;;&#xA;  if (n &lt; 0) {&#xA;  &#x9;s += &#39;1&#39;;&#xA;    n = Math.abs(n);&#xA;    }&#x9;&#xA;  else {&#xA;    s += &#39;0&#39;;&#xA;    }&#xA;  element.innerHTML = &#34;bit de signe : &lt;span style=&#39;color:green;&#39;&gt;&#34; + s + &#34;&lt;/span&gt;&lt;br&gt;&#34;;&#xA;  n = Math.abs(n);&#xA;  if (n &gt; 1) {&#xA;  &#x9;let mantPartieEntiere = Math.trunc(n).toString(2);&#xA;    mantisse_str = mantPartieEntiere.slice(1,);&#xA;    mantisse_str += conv_fract(n).slice(0,52-mantisse_str.length);&#xA;    exp = mantPartieEntiere.length-1 + 1023;&#xA;    exp_str = exp.toString(2);&#xA;    s += exp_str.padStart(11, &#39;0&#39;);&#xA;    }&#xA;  else {&#xA;    if (n == 0) {&#xA;      exp = 0;&#xA;      exp_str = &#39;0&#39;*11;&#xA;      s += exp_str;&#xA;      mantisse_str = &#39;0&#39;*52;&#xA;    }&#xA;&#x9;&#x9;else {&#xA;      let dvlpt = &#34;0&#34;+conv_fract(n);&#xA;      let Exp = 0;&#xA;      while (dvlpt[Exp] == &#34;0&#34; ){&#xA;        Exp += 1;&#xA;      }&#xA;      exp = Exp*(-1) + 1023&#xA;      exp_str = exp.toString(2);&#xA;      s += exp_str.padStart(11, &#39;0&#39;);&#xA;      mantisse_str = conv_fract(n).slice(Exp,);&#xA;    }&#xA;    }&#xA;  element.innerHTML += &#34;exposant (en puissance de 2) : &#34;;&#xA;  element.innerHTML += exp-1023;&#xA;  element.innerHTML += &#34; + 1023 = &#34;;&#xA;  element.innerHTML += exp;&#xA;  element.innerHTML += &#34;  d&#39;où en binaire : &lt;span style=&#39;color:purple;&#39;&gt;&#34;+exp_str+&#34;&lt;/span&gt;&#34;;&#xA;  s += mantisse_str;&#xA;  s = s.padEnd(64, &#39;0&#39;);&#xA;  s = s.slice(0,64);&#xA;  if (s[0]==1) {n=-n}&#xA;  element.innerHTML += &#34;&lt;br&gt;mot machine correspondant à &#34;+String(n)+&#34; : &lt;br&gt;&#34;&#xA;  element.innerHTML += &#34;&lt;span style=&#39;color:green;&#39;&gt;&#34; + s[0] + &#34; &lt;/span&gt;&#34;;&#xA;  element.innerHTML += &#34;&lt;span style=&#39;color:purple;&#39;&gt;&#34; + s.slice(1,12) + &#34; &lt;/span&gt;&#34;;&#xA;  element.innerHTML += &#34;&lt;span style=&#39;color:blue;&#39;&gt;&#34; + s.slice(12,) + &#34;&lt;/span&gt;&#34;;&#xA;}&#xA;&#xA;function convMot() {&#xA;&#x9;var nombre;&#xA;  const element = document.getElementById(&#34;res2&#34;);&#xA;  var s = document.getElementById(&#34;mot&#34;).value;&#xA;  s = s.replace(/\s/g, &#39;&#39;);&#xA;&#x9;if (parseInt(s) == 0) {&#xA;  &#x9;nombre = 0&#xA;  }&#xA;  else {&#xA;    let exp = parseInt(s.slice(1,12),2) - 1023&#xA;    nombre =  2**exp&#xA;    let mantisse = s.slice(12,)&#xA;    for (let i = 0; i &lt; 52; i++) {&#xA;      exp += -1&#xA;      nombre += parseInt(mantisse[i])*2**exp&#xA;    }&#xA;    if (s[0]==1){&#xA;      nombre *= -1&#xA;    }&#xA;  }&#xA; element.innerHTML = nombre&#xA;}&#xA;&lt;/script&gt;&#xA;&lt;br&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;une-solution-possible&#34;&gt;Une solution possible&lt;/h2&gt;&#xA;&lt;p&gt;La fonction suivante convertit la partie fractionnaire du nombre &lt;code&gt;n&lt;/code&gt; en binaire et donne ainsi son développement binaire (équivalent d&amp;rsquo;un dévelopement décimal).&lt;br&gt;&#xA;Tous les nombres auront nécessairement un développement binaire fini (et seront donc des fractions dyadiques) puisque le flottant donné en argument a lui même une écriture fini (il est codé sur 64 bits !).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strucutres de contrôle</title>
      <link>https://info-tsi-vieljeux.github.io/python/structcontr/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/python/structcontr/</guid>
      <description>&lt;h1 id=&#34;structures-de-contrôle&#34;&gt;Structures de contrôle&lt;/h1&gt;&#xA;&lt;h2 id=&#34;instruction-daffectation&#34;&gt;Instruction d&amp;rsquo;affectation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;définition&#34;&gt;Définition&lt;/h3&gt;&#xA;&lt;p&gt;Lorsqu&amp;rsquo;un objet est créé dans un programme Python, une certaine place en mémoire lui est allouée. Cette place est repérée par une adresse dont la valeur peut être obtenue grâce à la fonction &lt;code&gt;id()&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id(&lt;span style=&#34;color:#ae81ff&#34;&gt;3.7&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;4387417928&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Il est beaucoup plus pratique de pouvoir récupérer une valeur en mémoire grâce à un petit nom plutôt que par son adresse. C&amp;rsquo;est à ça que servent les variables. Une variable est liée à un objet grâce à une &lt;strong&gt;affectation&lt;/strong&gt; et identifie cet objet pour les calculs suivants. Une affectation est une instruction (pas de retour).&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 4 : algorithmes dichotomiques</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp4dicho/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp4dicho/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 8 : correction et complexité</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/tp8correc/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/tp8correc/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Les nombres en machine</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/nombre/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/nombre/</guid>
      <description>&lt;h1 id=&#34;représentation-des-nombres&#34;&gt;Représentation des nombres&lt;/h1&gt;&#xA;&lt;p&gt;Comment un nombre est-il représenté à l&amp;rsquo;intérieur d&amp;rsquo;un ordinateur ?&lt;/p&gt;&#xA;&lt;p&gt;L&amp;rsquo;espace pour représenter un nombre en machine est limité. Si cette limitation n&amp;rsquo;a pas trop d&amp;rsquo;impact pour les entiers (surtout en Python !) elle devient très handicapante pour représenter les réels.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;La représentation machine d&amp;rsquo;un nombre est appelée &lt;strong&gt;mot machine&lt;/strong&gt;. Sa taille est généralement aujourd&amp;rsquo;hui de 64 bits.&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;les-différentes-bases&#34;&gt;Les différentes bases&lt;/h2&gt;&#xA;&lt;p&gt;Une écriture en base $b$ utilise $b$ chiffres différents :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nombre de Bacon</title>
      <link>https://info-tsi-vieljeux.github.io/projets/bacon/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/bacon/</guid>
      <description>&lt;h1 id=&#34;nombre-de-bacon&#34;&gt;Nombre de Bacon&lt;/h1&gt;&#xA;&lt;p&gt;On part d&amp;rsquo;un ensemble de 250 films populaires. Pour chaque film, on a la liste des acteurs qui y jouent.&lt;/p&gt;&#xA;&lt;p&gt;À partir de ces informations, on peut créer un &lt;strong&gt;graphe&lt;/strong&gt; où les sommets sont les films et les acteurs et où une arête lie un acteur à un film dans lequel il joue.&lt;/p&gt;&#xA;&lt;p&gt;Le graphe obtenu est &lt;strong&gt;biparti&lt;/strong&gt; car il n&amp;rsquo;y a pas d&amp;rsquo;arête entre les acteurs, ni entre les films, seulement entre sommets de catégories différentes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 5 : fonctions récursives</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp5recu/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp5recu/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nim</title>
      <link>https://info-tsi-vieljeux.github.io/projets/nim/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/nim/</guid>
      <description>&lt;h1 id=&#34;jeu-de-nim&#34;&gt;Jeu de Nim&lt;/h1&gt;&#xA;&lt;p&gt;Présentation du jeu et de l&amp;rsquo;algorithme de Bouton :&lt;/p&gt;&#xA;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/2jahbr5wMHk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;br&gt;&#xA;&lt;h3 id=&#34;mission-&#34;&gt;Mission :&lt;/h3&gt;&#xA;&lt;p&gt;Coder une IA qui joue un coup gagnant lorsqu&amp;rsquo;elle est est en position gagnante (en suivant l&amp;rsquo;algorithme de Bouton) et qui joue aléatoirement si elle est sur une position perdante.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://presentationssite.github.io/info/nim/#/&#34;&gt;&lt;strong&gt;Jouer contre une telle IA&lt;/strong&gt;.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 6 : algorithmes de tri</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp6tri/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp6tri/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;#debord&#xA;{&#xA;overflow-x: auto; &#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 9 : nombres en machine</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/tp9nombre/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/tp9nombre/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graphes</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/graphes/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/graphes/</guid>
      <description>&lt;style&gt;&#xA;#debord&#xA;{&#xA;overflow-x: auto; &#xA;}&#xA;&lt;/style&gt;&#xA;&lt;h1 id=&#34;les-graphes&#34;&gt;Les graphes&lt;/h1&gt;&#xA;&lt;p&gt;Quelques points et des traits pour les relier suffisent pour créer un graphe. Cette grande simplicité est pourtant à l&amp;rsquo;origine d&amp;rsquo;un foisonnement mathématiques impressionnant.&lt;/p&gt;&#xA;&lt;h2 id=&#34;un-peu-dhistoire&#34;&gt;Un peu d&amp;rsquo;histoire&lt;/h2&gt;&#xA;&lt;p&gt;L&amp;rsquo;acte de naissance de la théorie des graphes date d&amp;rsquo;une petite énigme à laquelle s&amp;rsquo;attelaient sans succès les habitants de Königsberg. Comment un voyageur pouvait  traverser les sept ponts sans jamais passer deux fois sur le même pont ?&#xA;&lt;strong&gt;Euler&lt;/strong&gt; résout le problème et fonda du même coup la théorie des graphes !&#xA;&lt;img src=&#34;https://info-tsi-vieljeux.github.io/konigsberg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle</title>
      <link>https://info-tsi-vieljeux.github.io/projets/oracle/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/oracle/</guid>
      <description>&lt;h1 id=&#34;loracle-daaronson&#34;&gt;L&amp;rsquo;oracle d&amp;rsquo;Aaronson&lt;/h1&gt;&#xA;&lt;p&gt;Un petit projet tout gentil pour la fin&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;L&amp;rsquo;oracle d&amp;rsquo;Aaronson est un petit programme capable de prédire si une personne va taper &amp;ldquo;g&amp;rdquo; ou &amp;ldquo;h&amp;rdquo; sur son clavier avec une précision généralement supérieure à 60%.&lt;/p&gt;&#xA;&lt;p&gt;L&amp;rsquo;idée du programme de base :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pour chaque mot possible de 5 lettres (&amp;ldquo;g&amp;rdquo; ou &amp;ldquo;h&amp;rdquo;) entré par l&amp;rsquo;utilisateur, on tient à jour dans un registre la lettre que l&amp;rsquo;utilisateur tape tout de suite après.&lt;/li&gt;&#xA;&lt;li&gt;Il suffit ensuite de générer une prédiction pour les 5 dernières lettres qui ont été entrées en regardant quelle lettre est majoritairement donnée après ce mot.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Écrire le programme.&lt;/li&gt;&#xA;&lt;li&gt;Comment pourrait-on l&amp;rsquo;améliorer ?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;br&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;loracle-en-action&#34;&gt;L&amp;rsquo;oracle en action&lt;/h2&gt;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xA;&lt;a href=&#34;https://presentationssite.github.io/info/oracle/&#34;&gt;&#xA;    &lt;img src=&#34;https://info-tsi-vieljeux.github.io/boulecristal.png&#34; alt=&#34;description&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;p style=&#34;text-align:center;&#34;&gt;Cliquer sur l&#39;image&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 10 : les graphes</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_2/tp10graphes/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_2/tp10graphes/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 7 : matrices de pixels et image</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_1/tp7image/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_1/tp7image/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Algorithmique numérique</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_3/numerique/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_3/numerique/</guid>
      <description>&lt;h1 id=&#34;algorithmique-numérique&#34;&gt;Algorithmique numérique&lt;/h1&gt;&#xA;&lt;p&gt;L&amp;rsquo;informatique n&amp;rsquo;aime pas les flottants mais les physiciens et les mathématiciens désireux de simulations ou de résolution d&amp;rsquo;équations font difficilement sans&amp;hellip;&#xA;Il faut alors optimiser les algorithmes pour qu&amp;rsquo;ils évitent le mieux possible les pièges tendus par le codage fatalement imparfait des nombres réels en machine (pensez à revoir &lt;a href=&#34;https://info-tsi-vieljeux.github.io/semestre_2/nombre/#codage-des-nombres-r%C3%A9els-en-machine&#34;&gt;le chapitre en question&lt;/a&gt; pour vous rafraîchir la mémoire).&lt;/p&gt;&#xA;&lt;h2 id=&#34;pivot-de-gauss&#34;&gt;Pivot de Gauss&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://info-tsi-vieljeux.github.io/pseudo_gauss.pdf?width=600px&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Deux problèmes liés aux flottants :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;la vérification de la non nullité du pivot&lt;/li&gt;&#xA;&lt;li&gt;le choix du pivot&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;br&gt;&#xA;&lt;h3 id=&#34;comment-vérifier-quun-pivot-potentiel-est-nul-&#34;&gt;Comment vérifier qu&amp;rsquo;un pivot potentiel est nul ?&lt;/h3&gt;&#xA;&lt;p&gt;Tester une inégalité entre deux flottants est toujours une mauvaise idée (voirs &lt;a href=&#34;https://info-tsi-vieljeux.github.io/semestre_2/nombre/#codage-des-nombres-r%C3%A9els-en-machine&#34;&gt;cours sur la représentation des nombres en machine&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tournoi d&#39;Axelrod</title>
      <link>https://info-tsi-vieljeux.github.io/projets/axelrod/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/projets/axelrod/</guid>
      <description>&lt;h1 id=&#34;le-tournoi-daxelrod&#34;&gt;Le tournoi d&amp;rsquo;Axelrod&lt;/h1&gt;&#xA;&lt;p&gt;La mission est d&amp;rsquo;implémenter le tournoi d&amp;rsquo;Axelrod première version présenté dans la vidéo ci-dessous.&lt;/p&gt;&#xA;&lt;p&gt;Vous ferez concourir les stratégies suivantes en écrivant une fonction par stratégie :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;AllC&lt;/code&gt; : coopère toujours.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AllD&lt;/code&gt; : trahit toujours.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Rando&lt;/code&gt; : joue au hasard.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Alt&lt;/code&gt; : alterne un coup sur deux.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;TitforTat&lt;/code&gt; : coopère au premier coup puis joue le coup précédent de l&amp;rsquo;adversaire.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Grudger&lt;/code&gt; : commence par coopérer mais dès que l&amp;rsquo;autre trahit, trahit toujours.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Joss&lt;/code&gt; : commence par coopérer puis joue le coup précédent de l&amp;rsquo;adversaire sauf 10% du temps où il trahit.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;TitforTwoTats&lt;/code&gt; : trahit si l&amp;rsquo;autre trahit deux fois de suite, coopère sinon.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;TwoTitsforTat&lt;/code&gt; : coopère tant que l&amp;rsquo;autre coopère, mais à chaque trahison de l&amp;rsquo;adversaire, trahit deux fois consécutives.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Tester&lt;/code&gt; : commence par trahir. Si l&amp;rsquo;autre a coopéré au premier coup, &lt;code&gt;Tester&lt;/code&gt; se repent et joue &lt;code&gt;TitforTat&lt;/code&gt; pour la suite, sinon il joue &lt;code&gt;Alt&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Eatherly&lt;/code&gt; : commence par trahir puis trahit en proportion du taux de trahison de l&amp;rsquo;autre jusqu&amp;rsquo;à ce coup.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Gofman&lt;/code&gt; : commence par coopérer. Si les deux joueurs ont joué différemment au coup précédent, trahit avec une probabilité de 5/7, et coopère s&amp;rsquo;ils ont joué la même chose.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Tullock&lt;/code&gt; : coopère les 10 premiers coups puis coopère à chaque coup 10% de moins que l&amp;rsquo;autre a coopéré sur les 10 coups qui précèdent.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Pavlov&lt;/code&gt; : commence par coopérer. Si l&amp;rsquo;autre a coopéré au dernier tour, on garde le même coup, sinon on change.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Donnez le palmarès du tournoi après 200 parties.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 11 : algorithmique numérique</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_3/tp11/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_3/tp11/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bases de données</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_3/basededonnes/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_3/basededonnes/</guid>
      <description>&lt;h1 id=&#34;bases-de-données&#34;&gt;Bases de données&lt;/h1&gt;&#xA;&lt;p&gt;Les bases de données (database en anglais) sont une forme d&amp;rsquo;organisation des données. Elles permettent de centraliser différentes données en évitant les duplications inutiles et en garantissant un accès contrôlé évitant les corruptions.&#xA;&lt;img src=&#34;https://info-tsi-vieljeux.github.io/base.png?width=150px&#34; alt=&#34;&#34;&gt;&#xA;Une base de données peut gérer des données organisées suivant différents modèles : navigationnel, hierarchique, relationnel, post-relationnel&amp;hellip; C&amp;rsquo;est le modèle relationnel, le plus utilisé, qui va nous intéresser ici.&lt;/p&gt;&#xA;&lt;p&gt;Dans un &lt;strong&gt;modèle relationnel&lt;/strong&gt;, les données sont organisées dans des &lt;strong&gt;tables&lt;/strong&gt; (des tableaux à deux dimensions) ayant des &lt;strong&gt;relations&lt;/strong&gt; entre elles via des &lt;strong&gt;clés étrangères&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 12 : bases de données</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_3/tp12/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_3/tp12/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intelligence Artificielle</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_3/ia/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_3/ia/</guid>
      <description>&lt;h1 id=&#34;algorithmes-pour-lintelligence-artificielle&#34;&gt;Algorithmes pour l&amp;rsquo;Intelligence Artificielle&lt;/h1&gt;&#xA;&lt;p&gt;L&amp;rsquo;&lt;strong&gt;intelligence arificielle&lt;/strong&gt; (IA) est une discipline  scientifique qui a vu officiellement le jour en 1956. Elle repose sur la conjecture selon laquelle toutes les fonctions cognitives, en particulier l&amp;rsquo;apprentissage, le raisonnement, le calcul, la perception, la mémorisation, voire la découverte scientifique ou la créativité artistique, peuvent être décrites avec une précision telle qu&amp;rsquo;il serait possible de les reproduire sur des ordinateurs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://info-tsi-vieljeux.github.io/vennia.png?width=600px&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;L&amp;rsquo;&lt;strong&gt;apprentissage automatique&lt;/strong&gt; (Machine Learning) est à l&amp;rsquo;intersection de l&amp;rsquo;IA et d&amp;rsquo;un autre champ scientifique : la science des données (data science).&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP 13 : intelligence artificielle</title>
      <link>https://info-tsi-vieljeux.github.io/semestre_3/tp13/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/semestre_3/tp13/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://info-tsi-vieljeux.github.io/path/to/styles/default.min.css&#34;&gt;&#xA;&lt;script src=&#34;https://info-tsi-vieljeux.github.io/path/to/highlight.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;hljs.highlightAll();&lt;/script&gt;&#xA;&lt;style&gt;&#xA;#correc&#xA;{&#xA;  color: #006C65;&#xA;  border-left: solid 10px #C7DDDC;&#xA;}&#xA;#comm&#xA;{&#xA;  color: #004D80;&#xA;  border-left: solid 10px #B3CAD9;&#xA;}&#xA;#commsum&#xA;{&#xA;  color: #004D80;&#xA;}&#xA;#correcsum&#xA;{&#xA;  color: #006C65;&#xA;}&#xA;/* 1. Rétablir la déclaration que votre reset a écrasée */&#xA;details &gt; summary:first-of-type {&#xA;  display: list-item;     /* remet le triangle + l’accessibilité */&#xA;  cursor: pointer;        /* optionnel : feedback visuel */&#xA;}&#xA;&lt;p&gt;/* 2. Si vous aviez aussi supprimé le list-style */&#xA;details &amp;gt; summary:first-of-type {&#xA;list-style: disclosure-closed inside;&#xA;}&#xA;details[open] &amp;gt; summary:first-of-type {&#xA;list-style-type: disclosure-open;&#xA;}&#xA;&lt;/style&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Divers</title>
      <link>https://info-tsi-vieljeux.github.io/python/divers/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      <guid>https://info-tsi-vieljeux.github.io/python/divers/</guid>
      <description>&lt;h1 id=&#34;divers&#34;&gt;Divers&lt;/h1&gt;&#xA;&lt;h2 id=&#34;commentaires&#34;&gt;Commentaires&lt;/h2&gt;&#xA;&lt;p&gt;Tous les langages de programmations permettent d&amp;rsquo;introduire des commentaires dans le code qui servent d&amp;rsquo;aides et de repères à celui qui lit le code, mais qui sont ignorés lors de l&amp;rsquo;exécution.&lt;/p&gt;&#xA;&lt;p&gt;En Python, les commentaires sont introduits par le symbole dièse (hashtag) &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt; &#xA; &lt;/p&gt;&#xA;&lt;h2 id=&#34;utilisation-de-print&#34;&gt;Utilisation de print&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;print&lt;/code&gt; est la première fonction native que l&amp;rsquo;on rencontre. C&amp;rsquo;est une fonction à effet de bord :  elle ne retourne rien (elle est de type &lt;code&gt;None&lt;/code&gt;), mais elle permet d&amp;rsquo;afficher une chaîne de caractères, ou le contenu d&amp;rsquo;une variable, quel que soit son type.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

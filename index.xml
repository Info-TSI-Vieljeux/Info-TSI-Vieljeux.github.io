<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Cours info TSI</title>
    <link>http://example.org/</link>
    <description>Recent content in Introduction on Cours info TSI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Sat, 06 Mar 2021 14:20:50 +0100</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Les bonnes pratiques</title>
      <link>http://example.org/semestre_2/bonnes_pratiques/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_2/bonnes_pratiques/</guid>
      <description>Les bonnes pratiques  Protéger ses blocs en commentant son code Un bloc de code utilise généralement un ou plusieurs paramètres appelés paramètres d&amp;rsquo;entrées et construit à partir d&amp;rsquo;eux un ou plusieurs paramètres de sortie.
Dans l&amp;rsquo;idéal, on commente chaque bloc de code (boucles et fonctions) via l&amp;rsquo;utilisation de # en précisant dans la mesure du possibles les 3 éléments suivants :
 préconditions postconditions invariant  préconditions Ce sont les conditions que doivent vérifier impérativement les paramètres d&amp;rsquo;entrée pour que le code fasse ce qui est attendu.</description>
    </item>
    
    <item>
      <title>TP 1 : recherche simple</title>
      <link>http://example.org/semestre_1/tp1recherche/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp1recherche/</guid>
      <description>TP 1 : Recherche séquentielle dans un tableau unidimensionnel. Dictionnaires. Recherche d&amp;rsquo;un élément dans une liste  Écrire une fonction recherche qui prend pour argument un élément et une liste et qui retourne True si l&amp;rsquo;élément est présent et False sinon.
Le corps de la fonction devra comprendre une boucle.
  Dans le pire des cas (élément ne se trouvant pas dans la liste), combien de comparaisons doit-on opérer pour savoir si un élément est présent dans une liste de taille 400 ?</description>
    </item>
    
    <item>
      <title>TP 2 : boucles imbriquées</title>
      <link>http://example.org/semestre_1/tp2imbrication/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp2imbrication/</guid>
      <description>Algorithmes opérant sur une structure séquentielle par boucles imbriquées Chercher un mot dans un texte  Écrire une fonction cherche_mot qui recherche si un mot est présent dans un texte.
Vous devrez vous assurez (grâce à des assertions) que le mot et le texte sont bien des chaînes de caractères et que le mot n&amp;rsquo;est pas plus long que le texte.
 # importation de la classique liste de mots de passe rockyou (cela prend quelques secondes) from urllib.</description>
    </item>
    
    <item>
      <title>TP 2 : boucles imbriquées</title>
      <link>http://example.org/semestre_1/tp4dicho/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp4dicho/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TP 2 : boucles imbriquées</title>
      <link>http://example.org/semestre_1/tp5recu/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp5recu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TP 2 : boucles imbriquées</title>
      <link>http://example.org/semestre_1/tp6tri/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp6tri/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TP 2 : boucles imbriquées</title>
      <link>http://example.org/semestre_1/tp7image/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp7image/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TP 3 : utilisation de modules/bibliothèques</title>
      <link>http://example.org/semestre_1/tp3data/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp3data/</guid>
      <description>On va se placer dans le champ le plus porteur de la science informatique actuelle, l&amp;rsquo;analyse de données (data science) pour constater comment l&amp;rsquo;utilisation de modules adaptés peut simplifier le travail.
Exploration d&amp;rsquo;un jeu de données Statistiques simples import pandas as pd # bibliothèques dédiée au traitement de jeux de données import matplotlib.pyplot as plt # bibliothèque graphique import seaborn as sns # bibliothèque graphique reposant sur matplotlib et dédiée plus particulièrement à la représentation de jeux de données import numpy as np # bibliothèque puissante permettant de gérer des tableaux multidimensionnels import plotly.</description>
    </item>
    
    <item>
      <title>Traits généraux</title>
      <link>http://example.org/python/traitsgaux/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/python/traitsgaux/</guid>
      <description>Traits généraux Introduction Shell et IDE Python est un langage de programmation interprété développé par Guido van Rossum en 1989. Langage impératif de haut-niveau doté d&amp;rsquo;une syntaxe simple, Python s&amp;rsquo;adapte à de nombreux contextes grâce à sa modularité ; une importante librairie de modules et packages permet en effet d&amp;rsquo;étendre ses capacités.
Python possède son propre shell (interface en ligne de commande) : l&amp;rsquo;utilisateur entre une commande Python qui est interprétée immédiatement lorsque Entrée est tapée.</description>
    </item>
    
    <item>
      <title>Types de base</title>
      <link>http://example.org/python/typesbase/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/python/typesbase/</guid>
      <description>Types de base Les types de baseen python (les catégories fondamentales des objets manipulés) sont :
  Les entiers int (en anglais, entier se dit integer).
Exemples : 1, 2, 1012, -18 etc. Leur précision est infinie et leur taille est illimitée en Python.
   Les flottants float. Ce sont des approximations de nombres réels. La méthode d&amp;rsquo;écriture en machine de ces nombres, équivalente à une écriture scientifique pour nombre binaire, explique leur nom : ce sont des nombres à virgule flottante.</description>
    </item>
    
    <item>
      <title>Graphes</title>
      <link>http://example.org/semestre_2/graphes/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_2/graphes/</guid>
      <description>Les graphes Quelques points et des traits pour les relier suffisent pour créer un graphe. Cette grande simplicité est pourtant à l&amp;rsquo;origine d&amp;rsquo;un foisonnement mathématiques impressionnant.
Un peu d&amp;rsquo;histoire L&amp;rsquo;acte de naissance de la théorie des graphes date d&amp;rsquo;une petite énigme à laquelle s&amp;rsquo;attelaient sans succès les habitants de Königsberg. Comment un voyageur pouvait traverser les sept ponts sans jamais passer deux fois sur le même pont ? Euler résout le problème et fonda du même coup la théorie des graphes !</description>
    </item>
    
    <item>
      <title>Types structurés</title>
      <link>http://example.org/python/typesstruct/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/python/typesstruct/</guid>
      <description>Types structurés Les types structurés (chaînes, tuiles, listes, dictionnaires, ensembles) sont des objets composés ; ils contiennent eux-mêmes d&amp;rsquo;autres objets.
 Structures indicées immuables (chaînes, tuples) On peut parcourir les éléments présents dans une structure indicée à l&amp;rsquo;aide d&amp;rsquo;un indice (un nombre entier étiquetant l&amp;rsquo;indice). Les structures indicés sont donc ordonnées, ce sont des séquences. L&amp;rsquo;indice commence toujours à 0.
Et donc si la structure contient n éléments, le dernier indice est n-1.</description>
    </item>
    
    <item>
      <title>Strucutres de contrôle</title>
      <link>http://example.org/python/structcontr/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/python/structcontr/</guid>
      <description>Structures de contrôle Instruction d&amp;rsquo;affectation Définition Lorsqu&amp;rsquo;un objet est créé dans un programme Python, une certaine place en mémoire lui est allouée. Cette place est repérée par une adresse dont la valeur peut être obtenue grâce à la fonction id().
id(3.7) 4387417928
Il est beaucoup plus pratique de pouvoir récupérer une valeur en mémoire grâce à un petit nom plutôt que par son adresse. C&amp;rsquo;est à ça que servent les variables.</description>
    </item>
    
    <item>
      <title>Divers</title>
      <link>http://example.org/python/divers/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/python/divers/</guid>
      <description>Divers Commentaires Tous les langages de programmations permettent d&amp;rsquo;introduire des commentaires dans le code qui servent d&amp;rsquo;aides et de repères à celui qui lit le code, mais qui sont ignorés lors de l&amp;rsquo;exécution.
En Python, les commentaires sont introduits par le symbole dièse (hashtag) #.
 Utilisation de print print est la première fonction native que l&amp;rsquo;on rencontre. C&amp;rsquo;est une fonction à effet de bord : elle ne retourne rien (elle est de type None), mais elle permet d&amp;rsquo;afficher une chaîne de caractères, ou le contenu d&amp;rsquo;une variable, quel que soit son type.</description>
    </item>
    
  </channel>
</rss>

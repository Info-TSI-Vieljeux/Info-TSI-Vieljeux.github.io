<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cours Python</title>
    <link>https://cordier-info.github.io/cours_python/</link>
    <description>Recent content on Cours Python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language><atom:link href="https://cordier-info.github.io/cours_python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bases</title>
      <link>https://cordier-info.github.io/cours_python/cours1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours1/</guid>
      <description>Introduction Python est un langage de programmation interprété développé par Guido van Rossum en 1989. Langage impératif de haut-niveau doté d&amp;rsquo;une syntaxe simple, Python s&amp;rsquo;adapte à de nombreux contextes grâce à sa modularité ; une importante librairie de modules et packages permet en effet d&amp;rsquo;étendre ses capacités.
 Shell et IDE Python possède son propre shell (interface en ligne de commande) : l&amp;rsquo;utilisateur entre une commande Python qui est interprétée immédiatement lorsque Entrée est tapée.</description>
    </item>
    
    <item>
      <title>Chaînes de caractères</title>
      <link>https://cordier-info.github.io/cours_python/cours2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours2/</guid>
      <description>Les chaînes de caractères Définir une chaîne de caractères Une chaîne de caractères (type str pour l&amp;rsquo;anglais string) est une suite ordonnée de caractères.
Pour définir une variable de ce type, il suffit d&amp;rsquo;encadrer des caractères par &#39; ou &amp;quot; :
salutation = &amp;#34;Bonjour, monsieur &amp;#34; nom = &amp;#39;Raoul&amp;#39; Des chaînes de caractères peuvent être concaténées (= assemblées) en utilisant l&amp;rsquo;opérateur + :
&amp;#34;abc&amp;#34; + &amp;#39;def&amp;#39; &#39;abcdef&#39;
salutation + nom &#39;Bonjour, monsieur Raoul&#39;</description>
    </item>
    
    <item>
      <title>Séquences et itérables</title>
      <link>https://cordier-info.github.io/cours_python/cours3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours3/</guid>
      <description>Séquences et itérables Séquences Listes Python connaît différents types de données combinées, utilisés pour regrouper plusieurs valeurs. La plus souple est la liste, qui peut être écrite comme une suite, placée entre crochets, de valeurs (éléments) séparées par des virgules. Les éléments d&amp;rsquo;une liste ne sont pas obligatoirement tous du même type, bien qu&amp;rsquo;à l&amp;rsquo;usage ce soit souvent le cas.
liste1 = [1, &amp;#39;deux&amp;#39;, 3.14, 0] liste1 [1, &#39;deux&#39;, 3.14, 0]</description>
    </item>
    
    <item>
      <title>Structures de contrôle</title>
      <link>https://cordier-info.github.io/cours_python/cours4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours4/</guid>
      <description>Structures de contrôle Python étant un langage impératif, il possède des structures de contrôle permettant de dévier le flot d&amp;rsquo;exécution. Les structures de contrôle travaillent sur des blocs d&amp;rsquo;instructions contigües qui sont repérés par leur indentation en Python.
Les deux grandes familles de commandes de blocs sont :
 les alternatives : exécuter un bloc d&amp;rsquo;instructions si une certaine condition est réunie (si &amp;hellip; sinon si &amp;hellip; sinon) ; les boucles : exécuter un bloc d&amp;rsquo;instructions à plusieurs reprises (boucle &amp;ldquo;tant que&amp;rdquo; et les boucles avec compteur for déjà rencontrées).</description>
    </item>
    
    <item>
      <title>Fonctions</title>
      <link>https://cordier-info.github.io/cours_python/cours5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours5/</guid>
      <description>Fonctions Une fonction consiste en un bloc d&amp;rsquo;instructions qui peut être appelé et exécuté à différents endroits et à plusieurs reprises dans le programme.
Deux avantages à l&amp;rsquo;utilisation de fonctions :
 elles permettent de réutiliser du code sans avoir à le réécrire, elles permettent de décomposer un problème complexe en différentes procédures plus simples, chacune prise en charge par sa propre fonction.  Le code est rendu plus clair et plus facile à débuguer.</description>
    </item>
    
    <item>
      <title>Manipulation de fichiers</title>
      <link>https://cordier-info.github.io/cours_python/cours6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours6/</guid>
      <description>Manipulation de fichiers Interaction avec le système d&amp;rsquo;exploitation Le module os offre la possibilité d&amp;rsquo;interagir avec le système d&amp;rsquo;exploitation indépendamment de la plateforme utilisée.
 os.getcwd() renvoie le répertoire courant (répertoire depuis lequel le programme est exécuté) sous forme de chaîne.  import os os.getcwd() &#39;/Users/cordiermarc/Documents/prof/informatique/Python_6&#39;
 os.chdir(&#39;répertoire&#39;) permet de changer le répertoire courant pour le répertoire donné en argument. On peut soit donner le chemin absolu (qui commence par la racine, / sur un système Unix) soit un chemin relatif (qui commence par .</description>
    </item>
    
  </channel>
</rss>

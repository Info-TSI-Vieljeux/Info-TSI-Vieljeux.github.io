<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Semestre 1 on Cours info TSI</title>
    <link>http://example.org/semestre_1/</link>
    <description>Recent content in Semestre 1 on Cours info TSI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Sat, 06 Mar 2021 14:20:50 +0100</lastBuildDate><atom:link href="http://example.org/semestre_1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TP 0 : Démarrage</title>
      <link>http://example.org/semestre_1/tp0/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp0/</guid>
      <description>TP 0 : Démarrage Cliquez sur cette invitation pour récupérer le repository du TP. Exo 1 Combien de fois une feuille de papier d’épaisseur $e=0,1$ mm doit-elle être pliée pour atteindre la Lune ?
 Écrivez dans la cellule suivante un code permettant d&amp;rsquo;obtenir la réponse. Le plus simple est d&amp;rsquo;utiliser une boucle while.
 Wolfram alpha vous donne avec précision la distance Terre-Lune.
### VOTRE CODE  Dans la cellule suivante, affectez à la variable nb_plis la valeur entière trouvée.</description>
    </item>
    
    <item>
      <title>TP 1 : recherche simple</title>
      <link>http://example.org/semestre_1/tp1recherche/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp1recherche/</guid>
      <description>TP 1 : Recherche séquentielle dans un tableau unidimensionnel. Dictionnaires. Cliquez sur cette invitation pour récupérer le repository du TP. Recherche d&amp;rsquo;un élément dans une liste  Écrire une fonction recherche qui prend pour argument un élément et une liste et qui retourne True si l&amp;rsquo;élément est présent et False sinon.
Le corps de la fonction devra comprendre une boucle.
 def recherche(x,L) : &amp;#39;&amp;#39;&amp;#39; recherche(x: tout type, L : list) -&amp;gt; bool &amp;#39;&amp;#39;&amp;#39; ### VOTRE CODE  Dans le pire des cas (élément ne se trouvant pas dans la liste), combien de comparaisons doit-on opérer pour savoir si un élément est présent dans une liste de taille 400 ?</description>
    </item>
    
    <item>
      <title>TP 2 : boucles imbriquées</title>
      <link>http://example.org/semestre_1/tp2imbrication/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp2imbrication/</guid>
      <description>Algorithmes opérant sur une structure séquentielle par boucles imbriquées Chercher un mot dans un texte  Écrire une fonction cherche_mot naïve qui recherche si un mot est présent dans un texte en comparant chaque morceau du texte de la taille du mot au mot recherché.
Vous devrez vous assurez (grâce à des assertions) que le mot et le texte sont bien des chaînes de caractères et que le mot n&amp;rsquo;est pas plus long que le texte.</description>
    </item>
    
    <item>
      <title>TP 3 : utilisation de modules</title>
      <link>http://example.org/semestre_1/tp3data/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp3data/</guid>
      <description>L&amp;rsquo;idée de ce TP est de constater combien des modules/bibliothèques adaptés peuvent fournir des outils puissants et permettre un gain de temps gigantesque.
On va se placer dans un des champs les plus porteurs de la science informatique actuelle, l&amp;rsquo;analyse de données, pour constater comment l&amp;rsquo;utilisation de modules adaptés peut simplifier le travail.
Exploration d&amp;rsquo;un jeu de données Statistiques simples import pandas as pd # bibliothèques dédiée au traitement de jeux de données import matplotlib.</description>
    </item>
    
    <item>
      <title>TP 4 : algorithmes dichotomiques</title>
      <link>http://example.org/semestre_1/tp4dicho/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp4dicho/</guid>
      <description>Algorithmes dichotomiques Recherche dichotomique L&amp;rsquo;algorithme de recherche mis au point dans le tp1 compte dans le pire des cas autant d&amp;rsquo;étapes que l&amp;rsquo;ensemble scruté contient d&amp;rsquo;éléments.
Peut-on faire mieux ?
Dans le cas, d&amp;rsquo;un ensemble ordonné trié, la réponse est oui. On peut même faire beaucoup mieux !
L&amp;rsquo;idée est de regarder d&amp;rsquo;abord au milieu du paquet dans lequel on cherche. Si l&amp;rsquo;élément au milieu est plus petit (repectivement plus grand) que l&amp;rsquo;élément recherché, comme on sait que le paque t est trié, on en déduit que l&amp;rsquo;élément cherché ne peut être que dans la deuxième partie (respectivement dans la première partie) du paquet s&amp;rsquo;il est présent.</description>
    </item>
    
    <item>
      <title>TP 5 : fonctions récursives</title>
      <link>http://example.org/semestre_1/tp5recu/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp5recu/</guid>
      <description>Fonctions récursives   import numpy as np import matplotlib.pyplot as plt from matplotlib.patches import Rectangle plt.style.use(&amp;#39;seaborn&amp;#39;) plt.rcParams[&amp;#39;figure.figsize&amp;#39;] = (10, 10) fig, ax = plt.subplots() ax.set_aspect(1) couleurs = plt.rcParams[&amp;#39;axes.prop_cycle&amp;#39;].by_key()[&amp;#39;color&amp;#39;]  Deux tris récursifs Tri insertion  Écrire la fonction insertion qui permet à l&amp;rsquo;algorithme récursif tri_insertion défini plus bas de faire son travail.
 def insertion(element,Ltriee) : &amp;#34;&amp;#34;&amp;#34; insertion(element : float ou int, Ltriee : liste ou tuple de float ou int) -&amp;gt; Lins : liste ou tuple de float ou int insertion insert &amp;#39;nombre&amp;#39; au bon endroit dans &amp;#39;Ltriee&amp;#39; et retourne cette nouvelle liste.</description>
    </item>
    
    <item>
      <title>TP 6 : algorithmes de tri</title>
      <link>http://example.org/semestre_1/tp6tri/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp6tri/</guid>
      <description>algorithmes de tri Trier c&amp;rsquo;est partir d&amp;rsquo;une structure de données désordonnée et la remettre en ordre.
Les tris sont omniprésents en informatique et Tim Roughgarden (auteur d&#39;Algorithms illuminated) en parle même comme de la &amp;ldquo;mère de tous les problèmes algorithmiques&amp;rdquo;.
Plusieurs stratégies existent. On va en passer certaines en revue et essayer de trier les algorithmes de tri.
 Tris par comparaison La plupart des algorithmes de tri sont dits par comparaison car ils reposent sur des comparaisons deux à deux des éléments de la liste.</description>
    </item>
    
    <item>
      <title>TP 7 : matrices de pixels et image</title>
      <link>http://example.org/semestre_1/tp7image/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:56 +0100</pubDate>
      
      <guid>http://example.org/semestre_1/tp7image/</guid>
      <description>Tableau de pixels et images Importer une image PIL (python imaging library) est l&amp;rsquo;une des librairies Python permettant de manipuler des fichiers image. On va l&amp;rsquo;utiliser en association avec numpy qui est le module de choix pour jouer avec des tableaux numériques.
from PIL import Image import urllib.request # pour récupérer une image sur le web from IPython.display import display # pour afficher dans le notebook import matplotlib.pyplot as plt import numpy as np plt.</description>
    </item>
    
  </channel>
</rss>
